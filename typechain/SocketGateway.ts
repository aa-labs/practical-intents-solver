/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ISocketGateway {
  export type SocketControllerRequestStruct = {
    controllerId: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type SocketControllerRequestStructOutput = [number, string] & {
    controllerId: number;
    data: string;
  };
}

export declare namespace ISocketRequest {
  export type SwapMultiBridgeRequestStruct = {
    swapRouteId: PromiseOrValue<BigNumberish>;
    swapImplData: PromiseOrValue<BytesLike>;
    bridgeRouteIds: PromiseOrValue<BigNumberish>[];
    bridgeImplDataItems: PromiseOrValue<BytesLike>[];
    bridgeRatios: PromiseOrValue<BigNumberish>[];
    eventDataItems: PromiseOrValue<BytesLike>[];
  };

  export type SwapMultiBridgeRequestStructOutput = [
    number,
    string,
    number[],
    string[],
    BigNumber[],
    string[]
  ] & {
    swapRouteId: number;
    swapImplData: string;
    bridgeRouteIds: number[];
    bridgeImplDataItems: string[];
    bridgeRatios: BigNumber[];
    eventDataItems: string[];
  };
}

export interface SocketGatewayInterface extends utils.Interface {
  functions: {
    "BRIDGE_AFTER_SWAP_SELECTOR()": FunctionFragment;
    "CENT_PERCENT()": FunctionFragment;
    "addController(address)": FunctionFragment;
    "addRoute(address)": FunctionFragment;
    "addressAt(uint32)": FunctionFragment;
    "claimOwner()": FunctionFragment;
    "controllerCount()": FunctionFragment;
    "controllers(uint32)": FunctionFragment;
    "disableController(uint32)": FunctionFragment;
    "disableRoute(uint32)": FunctionFragment;
    "disabledRouteAddress()": FunctionFragment;
    "executeController((uint32,bytes))": FunctionFragment;
    "executeControllers((uint32,bytes)[])": FunctionFragment;
    "executeRoute(uint32,bytes)": FunctionFragment;
    "executeRoutes(uint32[],bytes[])": FunctionFragment;
    "getController(uint32)": FunctionFragment;
    "getRoute(uint32)": FunctionFragment;
    "nominateOwner(address)": FunctionFragment;
    "nominee()": FunctionFragment;
    "owner()": FunctionFragment;
    "rescueEther(address,uint256)": FunctionFragment;
    "rescueFunds(address,address,uint256)": FunctionFragment;
    "routes(uint32)": FunctionFragment;
    "routesCount()": FunctionFragment;
    "setApprovalForRouters(address[],address[],bool)": FunctionFragment;
    "swapAndMultiBridge((uint32,bytes,uint32[],bytes[],uint256[],bytes[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGE_AFTER_SWAP_SELECTOR"
      | "CENT_PERCENT"
      | "addController"
      | "addRoute"
      | "addressAt"
      | "claimOwner"
      | "controllerCount"
      | "controllers"
      | "disableController"
      | "disableRoute"
      | "disabledRouteAddress"
      | "executeController"
      | "executeControllers"
      | "executeRoute"
      | "executeRoutes"
      | "getController"
      | "getRoute"
      | "nominateOwner"
      | "nominee"
      | "owner"
      | "rescueEther"
      | "rescueFunds"
      | "routes"
      | "routesCount"
      | "setApprovalForRouters"
      | "swapAndMultiBridge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRIDGE_AFTER_SWAP_SELECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CENT_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoute",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableController",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableRoute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledRouteAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeController",
    values: [ISocketGateway.SocketControllerRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeControllers",
    values: [ISocketGateway.SocketControllerRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRoute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRoutes",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "nominee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rescueEther",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "routes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "routesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForRouters",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndMultiBridge",
    values: [ISocketRequest.SwapMultiBridgeRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "BRIDGE_AFTER_SWAP_SELECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CENT_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addressAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledRouteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nominee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndMultiBridge",
    data: BytesLike
  ): Result;

  events: {
    "ControllerAdded(uint32,address)": EventFragment;
    "ControllerDisabled(uint32)": EventFragment;
    "NewRouteAdded(uint32,address)": EventFragment;
    "OwnerClaimed(address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "RouteDisabled(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRouteAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouteDisabled"): EventFragment;
}

export interface ControllerAddedEventObject {
  controllerId: number;
  controllerAddress: string;
}
export type ControllerAddedEvent = TypedEvent<
  [number, string],
  ControllerAddedEventObject
>;

export type ControllerAddedEventFilter = TypedEventFilter<ControllerAddedEvent>;

export interface ControllerDisabledEventObject {
  controllerId: number;
}
export type ControllerDisabledEvent = TypedEvent<
  [number],
  ControllerDisabledEventObject
>;

export type ControllerDisabledEventFilter =
  TypedEventFilter<ControllerDisabledEvent>;

export interface NewRouteAddedEventObject {
  routeId: number;
  route: string;
}
export type NewRouteAddedEvent = TypedEvent<
  [number, string],
  NewRouteAddedEventObject
>;

export type NewRouteAddedEventFilter = TypedEventFilter<NewRouteAddedEvent>;

export interface OwnerClaimedEventObject {
  claimer: string;
}
export type OwnerClaimedEvent = TypedEvent<[string], OwnerClaimedEventObject>;

export type OwnerClaimedEventFilter = TypedEventFilter<OwnerClaimedEvent>;

export interface OwnerNominatedEventObject {
  nominee: string;
}
export type OwnerNominatedEvent = TypedEvent<
  [string],
  OwnerNominatedEventObject
>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface OwnershipTransferRequestedEventObject {
  _from: string;
  _to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface RouteDisabledEventObject {
  routeId: number;
}
export type RouteDisabledEvent = TypedEvent<[number], RouteDisabledEventObject>;

export type RouteDisabledEventFilter = TypedEventFilter<RouteDisabledEvent>;

export interface SocketGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocketGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRIDGE_AFTER_SWAP_SELECTOR(overrides?: CallOverrides): Promise<[string]>;

    CENT_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addController(
      controllerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoute(
      routeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressAt(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerCount(overrides?: CallOverrides): Promise<[number]>;

    controllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    disableController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabledRouteAddress(overrides?: CallOverrides): Promise<[string]>;

    executeController(
      socketControllerRequest: ISocketGateway.SocketControllerRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeControllers(
      controllerRequests: ISocketGateway.SocketControllerRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRoute(
      routeId: PromiseOrValue<BigNumberish>,
      routeData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRoutes(
      routeIds: PromiseOrValue<BigNumberish>[],
      dataItems: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nominateOwner(
      nominee_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominee(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rescueEther(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueFunds(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    routesCount(overrides?: CallOverrides): Promise<[number]>;

    setApprovalForRouters(
      routeAddresses: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      isMax: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAndMultiBridge(
      swapMultiBridgeRequest: ISocketRequest.SwapMultiBridgeRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BRIDGE_AFTER_SWAP_SELECTOR(overrides?: CallOverrides): Promise<string>;

  CENT_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  addController(
    controllerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoute(
    routeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressAt(
    routeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerCount(overrides?: CallOverrides): Promise<number>;

  controllers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  disableController(
    controllerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableRoute(
    routeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabledRouteAddress(overrides?: CallOverrides): Promise<string>;

  executeController(
    socketControllerRequest: ISocketGateway.SocketControllerRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeControllers(
    controllerRequests: ISocketGateway.SocketControllerRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRoute(
    routeId: PromiseOrValue<BigNumberish>,
    routeData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRoutes(
    routeIds: PromiseOrValue<BigNumberish>[],
    dataItems: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getController(
    controllerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoute(
    routeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  nominateOwner(
    nominee_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominee(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rescueEther(
    userAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueFunds(
    token: PromiseOrValue<string>,
    userAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  routes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  routesCount(overrides?: CallOverrides): Promise<number>;

  setApprovalForRouters(
    routeAddresses: PromiseOrValue<string>[],
    tokenAddresses: PromiseOrValue<string>[],
    isMax: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAndMultiBridge(
    swapMultiBridgeRequest: ISocketRequest.SwapMultiBridgeRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BRIDGE_AFTER_SWAP_SELECTOR(overrides?: CallOverrides): Promise<string>;

    CENT_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addController(
      controllerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    addRoute(
      routeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    addressAt(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimOwner(overrides?: CallOverrides): Promise<void>;

    controllerCount(overrides?: CallOverrides): Promise<number>;

    controllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    disableController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disabledRouteAddress(overrides?: CallOverrides): Promise<string>;

    executeController(
      socketControllerRequest: ISocketGateway.SocketControllerRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executeControllers(
      controllerRequests: ISocketGateway.SocketControllerRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeRoute(
      routeId: PromiseOrValue<BigNumberish>,
      routeData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeRoutes(
      routeIds: PromiseOrValue<BigNumberish>[],
      dataItems: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nominateOwner(
      nominee_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominee(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rescueEther(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueFunds(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    routesCount(overrides?: CallOverrides): Promise<number>;

    setApprovalForRouters(
      routeAddresses: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      isMax: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndMultiBridge(
      swapMultiBridgeRequest: ISocketRequest.SwapMultiBridgeRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ControllerAdded(uint32,address)"(
      controllerId?: PromiseOrValue<BigNumberish> | null,
      controllerAddress?: PromiseOrValue<string> | null
    ): ControllerAddedEventFilter;
    ControllerAdded(
      controllerId?: PromiseOrValue<BigNumberish> | null,
      controllerAddress?: PromiseOrValue<string> | null
    ): ControllerAddedEventFilter;

    "ControllerDisabled(uint32)"(
      controllerId?: PromiseOrValue<BigNumberish> | null
    ): ControllerDisabledEventFilter;
    ControllerDisabled(
      controllerId?: PromiseOrValue<BigNumberish> | null
    ): ControllerDisabledEventFilter;

    "NewRouteAdded(uint32,address)"(
      routeId?: PromiseOrValue<BigNumberish> | null,
      route?: PromiseOrValue<string> | null
    ): NewRouteAddedEventFilter;
    NewRouteAdded(
      routeId?: PromiseOrValue<BigNumberish> | null,
      route?: PromiseOrValue<string> | null
    ): NewRouteAddedEventFilter;

    "OwnerClaimed(address)"(
      claimer?: PromiseOrValue<string> | null
    ): OwnerClaimedEventFilter;
    OwnerClaimed(
      claimer?: PromiseOrValue<string> | null
    ): OwnerClaimedEventFilter;

    "OwnerNominated(address)"(
      nominee?: PromiseOrValue<string> | null
    ): OwnerNominatedEventFilter;
    OwnerNominated(
      nominee?: PromiseOrValue<string> | null
    ): OwnerNominatedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "RouteDisabled(uint32)"(
      routeId?: PromiseOrValue<BigNumberish> | null
    ): RouteDisabledEventFilter;
    RouteDisabled(
      routeId?: PromiseOrValue<BigNumberish> | null
    ): RouteDisabledEventFilter;
  };

  estimateGas: {
    BRIDGE_AFTER_SWAP_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    CENT_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addController(
      controllerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoute(
      routeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressAt(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerCount(overrides?: CallOverrides): Promise<BigNumber>;

    controllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabledRouteAddress(overrides?: CallOverrides): Promise<BigNumber>;

    executeController(
      socketControllerRequest: ISocketGateway.SocketControllerRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeControllers(
      controllerRequests: ISocketGateway.SocketControllerRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRoute(
      routeId: PromiseOrValue<BigNumberish>,
      routeData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRoutes(
      routeIds: PromiseOrValue<BigNumberish>[],
      dataItems: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateOwner(
      nominee_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rescueEther(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueFunds(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routesCount(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForRouters(
      routeAddresses: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      isMax: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAndMultiBridge(
      swapMultiBridgeRequest: ISocketRequest.SwapMultiBridgeRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGE_AFTER_SWAP_SELECTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CENT_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addController(
      controllerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoute(
      routeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressAt(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabledRouteAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeController(
      socketControllerRequest: ISocketGateway.SocketControllerRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeControllers(
      controllerRequests: ISocketGateway.SocketControllerRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRoute(
      routeId: PromiseOrValue<BigNumberish>,
      routeData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRoutes(
      routeIds: PromiseOrValue<BigNumberish>[],
      dataItems: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getController(
      controllerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoute(
      routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateOwner(
      nominee_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rescueEther(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueFunds(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForRouters(
      routeAddresses: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      isMax: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAndMultiBridge(
      swapMultiBridgeRequest: ISocketRequest.SwapMultiBridgeRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
